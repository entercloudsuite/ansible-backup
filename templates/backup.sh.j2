#!/usr/bin/env bash

## Dipendenze:
## 1) restic
## 2) jq
## Opzionale: fusermount (pkg: fuse su CentOS e Ubuntu). Richiesto solo per `restic mount`.


export RESTIC_REPOSITORY="{{restic_repository}}"
source /usr/local/restic/customer-data.sh

## Per favore NON MODIFICATE la variabile RESTIC_PASSWORD.
## Viceversa i backup non saranno ripristinabili. 

export RESTIC_PASSWORD="{{restic_repository_password}}"
export XDG_CACHE_HOME="{{restic_XDG_CACHE_HOME}}"

export OS_ENDPOINT_TYPE=publicURL
export OS_INTERFACE=public
export OS_IDENTITY_API_VERSION=2

## L'init va dato SOLO la prima volta. Se il repo su
## Swift esiste giÃ , restituisce comunque errore.
#/usr/local/bin/restic init

## Esegue il backup dei database.

START=$(date "+%s")
TIMESTAMP=$(date --iso | tr -d -)
{% if restic_activator != "systemd" -%} >  RESTIC_BACKUP_LOG_PATH="{{backup_logpath}}" {%- endif %}
# set check variable to 1
I=0
BACKUPPATH="{{restic_backup_path}}"
mkdir -p "{{restic_backup_path}}"
mkdir -p "{{backup_logpath}}"

# Use I to check the loop

function prepare_bk {
  {{restic_backup_script}}
}

{% if 'backup' in restic_functions %}
I=$[$I+1]
#+-----------------------------------------------------------------------------+
#|                            BackUp                                           |
#+-----------------------------------------------------------------------------+
if prepare_bk ${@};
then
    if "{{restic_binary_path}}/restic" backup "{{restic_backup_path}}" {%- if restic_activator != "systemd" %} >  $RESTIC_BACKUP_LOG_PATH/backup.log; {%- endif %}


    then
	sleep 5
	echo restic backup ok
	S=$[$S+1]
    else
        sleep 5
	echo restic backup fail
	S=500
    fi

else
    "{{restic_binary_path}}/restic" backup "{{restic_backup_path}}" {%- if restic_activator != "systemd" %} >  $RESTIC_BACKUP_LOG_PATH/backup.log; {%- endif %}


    sleep 5
    # nel caso la funziona di prepare fallisca esegui ugualmente il backup e poi invia la notifica di fallimento
    S=500
fi
{% endif %}

{% if 'forget' in restic_functions %}
I=$[$I+1]

{{restic_before_forget_script}}

#+-----------------------------------------------------------------------------+
#|                            Forget                                           |
#+-----------------------------------------------------------------------------+
if "{{restic_binary_path}}/restic" forget {% for flag, flag_value in restic_forget_time.items() %}{{ flag }} {{ flag_value }} {% endfor %} {%- if restic_activator != "systemd" -%} >  $RESTIC_BACKUP_LOG_PATH/backup.log; {% endif %}

then
    sleep 5
    echo restic forget ok 
    S=$[$S+1]
else
    sleep 5
    echo restic forget fail
    S=500
fi

{{restic_after_forget_script}}

{% endif %}

{% if 'check' in restic_functions %}
I=$[$I+1]
{{restic_before_check_script}}

#+-----------------------------------------------------------------------------+
#|                              check                                          |
#+-----------------------------------------------------------------------------+
if "{{restic_binary_path}}/restic" check {%- if restic_activator != "systemd" %} >  $RESTIC_BACKUP_LOG_PATH/backup.log; {% endif %}

then
    sleep 5
    echo restic check ok
    S=$[$S+1]
else
    sleep 5
    echo restic check fail
    S=500
fi

{{restic_after_check_script}}

{% endif %}

{% if 'prune' in restic_functions %}
I=$[$I+1]
{{restic_before_prune_script}}

#+-----------------------------------------------------------------------------+
#|                             prune                                           | 
#+-----------------------------------------------------------------------------+
if "{{restic_binary_path}}/restic" prune {%- if restic_activator != "systemd" %} >  $RESTIC_BACKUP_LOG_PATH/backup.log; {% endif %}

then
    sleep 5
    echo restic prune ok
    S=$[$S+1]
else
    sleep 5
    echo restic prune fail
    S=500
fi

{{restic_after_prune_script}}

{% endif %}

{{restic_before_notification_script}}

#+----------------------------------------------------------------------------+
#|                    Sent BackUp Notification                                |
#+----------------------------------------------------------------------------+

sleep 5
END_TIME=$(date "+%s")
runtime=$((END_TIME - START))
if [[ "$I" == "$S" ]]
then
    curl -i -XPOST "http://{{ influxDB_url }}:{{ influxDB_port }}/write?db={{ influxDB_DatabaseName }}&u={{ influxDB_Username  }}&p={{ influxDB_Password }}" --data-binary "backup,customer=$CUSTOMER,host=$HOSTNAME,service_name={{ notification_service_name }} status=1,elapsed=$runtime"
    echo sent ok notification
else
    curl -i -XPOST "http://{{ influxDB_url }}:{{ influxDB_port }}/write?db={{ influxDB_DatabaseName }}&u={{ influxDB_Username  }}&p={{ influxDB_Password }}" --data-binary "backup,customer=$CUSTOMER,host=$HOSTNAME,service_name={{ notification_service_name }} status=2,elapsed=$runtime"
    echo sent fail notification
fi

{{restic_after_notification_script}}

## Elenca i backup eseguiti.
#restic -r swift:${_CONTAINER}:/home snapshots

## Effettua un restore partendo dall'ultima snapshot.
## Per backup precedenti, indicare l'id della snapshot al posto di `latest`
## (vedi comando precedente). Altre opzioni:
## --target: directory di destinazione
## --include: specifica quale directory ripristinare
#restic -r swift:${_CONTAINER}:/home restore latest --target /restore
